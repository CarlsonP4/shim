#!/bin/bash
#
################################################################
# Global variables
#
SERVICE_FILE=/usr/lib/systemd/system/shim.service
SHIM_CONF=/var/lib/shim/conf
################################################################
if [ "$1" = "--hope" ]; then
    echo "Abandon hope all ye who enter systemd"
    exit 0
fi
# Help
if [ "$1" = "-h" -o "$1" == "--help" ]; then
cat <<EOF
$0
    is a script that makes shim a systemd service.
    This means shim will start at boot and will restart on failure.

    There are no arguments to this command

    This script was called at installation.
    When a change is made to shim's configuration (in /var/lib/shim/conf)
    this script should be run manually.

    This script will stop the shim, modify the shim.service file, and start the shim.
    To see that the service is up you can use the command:
         systemctl status shim
    For further use of  "systemctl" see documentation.
EOF
    exit 0
fi
# Locate scidb installation
SCIDB_DIR=$(dirname $(dirname $(which scidb 2>/dev/null) 2>/dev/null) 2>/dev/null)
if test -z "${SCIDB_DIR}"; then
    if test -d /opt/scidb; then
        SCIDB_DIR=$(dirname $(dirname $(find /opt/scidb/ -name shim 2>/dev/null | tail -n 1) 2>/dev/null) 2>/dev/null)
    fi
    if test -z "${SCIDB_DIR}"; then
        echo "Error: can't find SciDB installation tree." 2>&1
        exit 1
    fi
fi
# Locate shimsvc
SHIMSVC_FILE=$(find ${SCIDB_DIR} -name shimsvc 2>/dev/null | tail -n 1)
if [ ! -f "$SHIMSVC_FILE" ]; then
    echo "Error: can not find shimsvc ($SHIMSVC_FILE)." 2>&1
    exit 1
fi
if [ ! -x "$SHIMSVC_FILE" ]; then
    echo "Error: shimsvc installed improperly ($SHIMSVC_FILE)." 2>&1
    echo "       shimsvc must be executible." 2>&1
    exit 1
fi
# Locate conf file
if [ ! -f "$SHIM_CONF" ]; then
    echo "Error: No shim configuration file found ($SHIM_CONF)." 2>&1
    echo "       Something is wrong." 2>&1
    exit 1
fi
# Do we need to do anything?
if [ -f $SERVICE_FILE -a $SERVICE_FILE -nt $SHIM_CONF ]; then
    echo "Nothing to be done."
    echo "Service unit file is newer than shim conf file."
    exit 0
fi
# Must be run as root
if [[ $EUID -ne 0 ]]; then
    echo "This script must be run as root"
    exit 1
fi
# Using the init.d script "shimsvc" get the line that would be used
# with init.d to start the service.
SHIMSVC_RESULTS="$($SHIMSVC_FILE test)"
# Now parse the line extracting the ExecStart= command and the User=
#   The line is of the form:
#   Command line su scidb -c "'/opt/scidb/18.1/bin/shim' -s 1239 -t /home/scidb/scidb_data/0/0 -i 0 -a"
#
USER=$(echo $SHIMSVC_RESULTS | awk '{print $4}')
EXEC_START="$(echo $SHIMSVC_RESULTS | awk -F\" '{print $2}' | sed "s/'//g")"
#
# Stop the service
#   ignore any bad things (like service not running or service not there)
systemctl -q stop shim 2>/dev/null || true
# Disable the service
#   ignore any bad things (like service not enabled or service not there)
systemctl -q disable  shim 2>/dev/null || true
# Save out the service file as .bak
if [ -f ${SERVICE_FILE}.bak ]; then
    rm -f ${SERVICE_FILE}.bak
fi
if [ -f ${SERVICE_FILE} ]; then
    mv ${SERVICE_FILE} ${SERVICE_FILE}.bak
fi
# Generate the service file
cat <<EOF >> ${SERVICE_FILE}
[Unit]
Description=SciDB shim server
After=syslog.target
After=network.target

[Install]
WantedBy=multi-user.target

[Service]
Type=forking
Restart=on-failure
EOF
echo "User=${USER}" >> ${SERVICE_FILE}
echo "ExecStart=${EXEC_START}" >> ${SERVICE_FILE}
# Now start
systemctl -q daemon-reload
echo "systemctl daemon-reload"
systemctl -q enable shim
echo "systemctl enable shim"
systemctl -q start shim
echo "systemctl start shim"
